name: Foundry Tests

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'backend/smart-contract/**'
      - '.github/workflows/foundry-tests.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'backend/smart-contract/**'
      - '.github/workflows/foundry-tests.yml'

jobs:
  test:
    name: Foundry Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/smart-contract

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Cache Foundry dependencies
        uses: actions/cache@v4
        with:
          path: |  
            ~/.foundry/cache
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            backend/smart-contract/lib
            backend/smart-contract/cache
            backend/smart-contract/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('backend/smart-contract/foundry.toml', 'backend/smart-contract/lib/*/') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Install dependencies
        run: forge install

      - name: Install Python and Vyper
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Vyper
        run: |
          pip install vyper==0.3.10
          VYPER_EXECUTABLE=$(which vyper)
          echo "VYPER_PATH=${VYPER_EXECUTABLE}" >> $GITHUB_ENV
          echo "Vyper installed at: ${VYPER_EXECUTABLE}"

      - name: Run tests
        env:
          FOUNDRY_PROFILE: ci
        run: |
          # Setup Vyper environment
          echo "Setting up Vyper environment..."
          echo "Using vyper path: $VYPER_PATH"
          
          # Create a CI-specific foundry.toml
          echo "Creating CI-specific foundry.toml..."
          ORIGINAL_TOML="$(cat foundry.toml)"
          echo "$ORIGINAL_TOML" > foundry.toml.ci
          echo "vyper_path = \"$VYPER_PATH\"" >> foundry.toml.ci
          mv foundry.toml.ci foundry.toml
          cat foundry.toml
          
          # Run the tests with parallel execution and better error reporting
          echo "Running Forge tests..."
          forge clean
          forge test --via-ir --coverage -vvv --parallel --fail-fast

      - name: Generate LCOV report
        run: forge coverage --report lcov --report-dir ./coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true
          flags: foundry-tests
          name: solidity-coverage
          
      # Always provide a summary of the coverage report
      - name: Coverage report summary
        run: |
          echo "Coverage report is available in the ./coverage directory."
          ls -la ./coverage

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: backend/smart-contract
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Cache Foundry dependencies
        uses: actions/cache@v4
        with:
          path: |  
            ~/.foundry/cache
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            backend/smart-contract/lib
            backend/smart-contract/cache
            backend/smart-contract/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('backend/smart-contract/foundry.toml', 'backend/smart-contract/lib/*/') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Install dependencies
        run: |
          forge clean
          forge install

      - name: Install Python and uv
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Vyper for Slither
        id: set_vyper_for_slither
        run: |
          pip install vyper==0.3.10
          VYPER_EXECUTABLE=$(which vyper)
          echo "VYPER_PATH_FOR_SLITHER=${VYPER_EXECUTABLE}" >> $GITHUB_ENV # Keep for other potential uses
          echo "vyper_exe_path=${VYPER_EXECUTABLE}" >> $GITHUB_OUTPUT     # Set as step output
          echo "Vyper for Slither installed at: ${VYPER_EXECUTABLE}"

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |  
            ~/.cache/uv
            ~/.local/bin/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Slither and dependencies
        run: |
          uv pip install --system slither-analyzer
          pip install vyper==0.3.10
          VYPER_EXECUTABLE=$(which vyper)
          echo "VYPER_PATH=${VYPER_EXECUTABLE}" >> $GITHUB_ENV
          echo "Vyper installed at: ${VYPER_EXECUTABLE}"

      - name: Run Slither
        env:
          PATH: ${{ env.PATH }}:/opt/hostedtoolcache/Python/3.10.17/x64/bin
        run: |
          echo "Executing Slither security analysis..."
          # Create build directory for Slither
          mkdir -p out/build-info
          
          # Run forge build to generate build info
          forge build --build-info --skip */test/** */script/** || echo "::warning::Forge build had issues"
          
          # Run slither with better configuration
          slither . --ignore-compile --json slither-report.json --sarif slither-results.sarif || echo "::warning::Slither found potential issues - check the report for details"
          
          # Generate a summary of findings
          if [ -f "slither-report.json" ]; then
            echo "::group::Slither Security Findings Summary"
            jq -r '.results.detectors[] | "- [" + .impact + "] " + .check + ": " + .description' slither-report.json || echo "Could not parse Slither report"
            echo "::endgroup::"
          fi
