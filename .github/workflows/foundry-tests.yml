name: Foundry Tests

on:
  push:
    branches: [main, master, develop]
    paths:
      - "backend/smart-contract/**"
      - ".github/workflows/foundry-tests.yml"
  pull_request:
    branches: [main, master, develop]
    paths:
      - "backend/smart-contract/**"
      - ".github/workflows/foundry-tests.yml"

# Add concurrency to prevent multiple workflows from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Foundry Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/smart-contract

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Cache Foundry dependencies
        uses: actions/cache@v4
        id: foundry-cache
        with:
          path: |
            ~/.foundry/cache
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            backend/smart-contract/lib
            backend/smart-contract/cache
            backend/smart-contract/out
            ~/.solc-select
          key: ${{ runner.os }}-foundry-${{ hashFiles('backend/smart-contract/foundry.toml', 'backend/smart-contract/lib/*/') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      # Only install dependencies if cache miss
      - name: Install dependencies
        if: steps.foundry-cache.outputs.cache-hit != 'true'
        run: forge install

      - name: Install Python and Vyper
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Vyper
        run: |
          pip install vyper==0.3.10
          VYPER_EXECUTABLE=$(which vyper)
          echo "VYPER_PATH=${VYPER_EXECUTABLE}" >> $GITHUB_ENV
          echo "Vyper installed at: ${VYPER_EXECUTABLE}"

      - name: Run tests
        env:
          FOUNDRY_PROFILE: ci
          FOUNDRY_DISABLE_NIGHTLY_WARNING: true
        run: |
          # Setup Vyper environment
          echo "Setting up Vyper environment..."
          echo "Using vyper path: $VYPER_PATH"

          # Create a CI-specific foundry.toml
          echo "Creating CI-specific foundry.toml..."
          ORIGINAL_TOML="$(cat foundry.toml)"
          echo "$ORIGINAL_TOML" > foundry.toml.ci
          echo "vyper_path = \"$VYPER_PATH\"" >> foundry.toml.ci
          mv foundry.toml.ci foundry.toml
          cat foundry.toml

          # Run the tests with better error reporting
          echo "Running Forge tests..."
          forge clean
          forge test --via-ir -vvv --fail-fast

      - name: Generate LCOV report
        env:
          FOUNDRY_DISABLE_NIGHTLY_WARNING: true
        run: forge coverage --report lcov --ir-minimum

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          # Only use the token if it's available in secrets
          token: ${{ secrets.CODECOV_TOKEN || '' }}
          directory: ./
          fail_ci_if_error: false
          verbose: true
          flags: foundry-tests
          name: solidity-coverage

      # Always provide a summary of the coverage report
      - name: Coverage report summary
        run: |
          echo "Coverage report is available in the lcov.info file."
          ls -la lcov.info || echo "lcov.info file not found"

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: backend/smart-contract
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Cache Foundry dependencies
        uses: actions/cache@v4
        id: foundry-cache-static
        with:
          path: |
            ~/.foundry/cache
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            backend/smart-contract/lib
            backend/smart-contract/cache
            backend/smart-contract/out
            ~/.solc-select
          key: ${{ runner.os }}-foundry-static-${{ hashFiles('backend/smart-contract/foundry.toml', 'backend/smart-contract/lib/*/') }}
          restore-keys: |
            ${{ runner.os }}-foundry-static-
            ${{ runner.os }}-foundry-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        id: python-cache
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        if: steps.foundry-cache-static.outputs.cache-hit != 'true'
        run: |
          forge clean
          forge install

      - name: Install Python dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          pip install vyper==0.3.10 slither-analyzer
          VYPER_EXECUTABLE=$(which vyper)
          echo "VYPER_PATH=${VYPER_EXECUTABLE}" >> $GITHUB_ENV
          echo "Vyper installed at: ${VYPER_EXECUTABLE}"

      - name: Run Slither
        continue-on-error: true
        env:
          PATH: ${{ env.PATH }}:/opt/hostedtoolcache/Python/3.10.17/x64/bin
          FOUNDRY_PROFILE: ci
          FOUNDRY_DISABLE_NIGHTLY_WARNING: true
        run: |
          echo "::group::Slither Analysis"
          echo "Executing Slither security analysis..."
          # Create build directory for Slither
          /bin/mkdir -p out/build-info

          # First compile with via-ir to avoid stack too deep errors
          # Use a custom foundry.toml file for slither to ensure optimizer settings are included
          echo "[profile.default]" > slither-foundry.toml
          echo "src = 'src'" >> slither-foundry.toml
          echo "out = 'out'" >> slither-foundry.toml
          echo "libs = ['lib']" >> slither-foundry.toml
          echo "optimizer = true" >> slither-foundry.toml
          echo "optimizer_runs = 1000" >> slither-foundry.toml
          echo "via_ir = true" >> slither-foundry.toml

          # Build with the custom foundry.toml
          FOUNDRY_CONFIG=slither-foundry.toml forge build --build-info --via-ir --skip */test/** */script/**

          # If forge build fails, fail the job
          if [ $? -ne 0 ]; then
            echo "::error::Forge build failed, cannot continue with static analysis"
            exit 1
          fi

          # Run Slither
          # Catch errors but don't fail the workflow
          set +e
          slither . --foundry-ignore-compile --json slither-report.json --sarif slither-results.sarif
          SLITHER_EXIT_CODE=$?
          set -e

          echo "Slither completed with exit code: $SLITHER_EXIT_CODE"

          # Generate a summary of findings if the report exists
          if [ -f "slither-report.json" ]; then
            echo "Slither Security Findings Summary:"
            jq -r '.results.detectors[] | "- [" + .impact + "] " + .check + ": " + .description' slither-report.json || echo "Could not parse Slither report"
          else
            echo "No slither-report.json file found. Slither may have encountered errors."
          fi

          # Always create empty report files if they don't exist to avoid upload failures
          touch slither-report.json
          touch slither-results.sarif

          echo "::endgroup::"

      - name: Upload Slither results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: slither-results
          path: |
            backend/smart-contract/slither-report.json
            backend/smart-contract/slither-results.sarif
          retention-days: 5
